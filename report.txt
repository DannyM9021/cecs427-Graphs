# Daniel Moreno
# CECS 427-01 Dynamic Networks
# Due Date: February 6, 2024

    The hardest part of the assignment was knowing how to get started. It took me a few times to fully understand how the program was to be
implemented based on the instructions that were given. The first thing I did was trying to make a kind of "skeleton" of what needed to be done
by making functions that match the instructions (made functions for read_graph, save_graph, etc). This way I was able to tackle each of the 
requirements one at a time in an isolated manner. Before implementing them however, I made a main function to make sure that they were all linked 
correctly. I also made sure to read some of the Networkx documentation to understand how it worked, and then later looked for modules that would 
be helpful in my program. With all this information I started to implement each of the functions one at a time.
    I found that most of the functionality that I needed could be found in the networkx library, such as reading an adjacency list, writing an adjacency
list, creating graphs, etc. However, some of the problems started when I tried to save the graphs to "local memory". Since they were being created within
a function, the graphs were not able to be read by the other functions (as they were out of the scope), a way I got around this was to make a "global memory"
that was initialized in the main function of the program and then passed to EVERY function so it could be returned for and used for the next selection. Some of 
the functions did not manipulate the graphs, simply just referenced them, so they just returned the same graph that was passed into its function. This was a bit
confusing at first, but this made sure the graph was being passed and referenced correctly.
    Most of the modules offered by networkx gave me almost no trouble, the only one that seems to be having a bit of trouble even as of now was for finding the 
shortest path of a graph. The shortest_path function works 100% correctly when a file is READ first and then the shortest path is chosen. The problem is when a new
graph is being created using the 3rd option. It creates a new graph successfully, however, when it is passed to the shortest path option, it states that no nodes were
found even though it is referencing the correct graph. It does work when a graph is created (3rd option), saved into a separate file (2nd option), read from a file into
local memory (1st option) AND THEN finding the shortest path (4th option). This seems to be the only bug that I was unable to fix, everything SEEMS corerect, but it probably
has something to do with the type of Graph that is being generated by the erdos-reyni graph from option 3. Other than that, if a short path does or does not exist, the plotting of
the graph (5th option) works well. If a shortest path does exist, in the plot the path and nodes are highlighted in red.
    Overall, it seems like I did not have much trouble doing the lab. I was able to learn how the networkx library works, so I can use this for my other classes if necessary. Only
one bug seems to persist, so overall, it's not so bad. UPDATE: Since the assignment was extended I tried to fix the problem that I mentioned above, and now it is working fine. The
line that I added was: G = nx.relabel_nodes(G, {node:str(node) for node in G.nodes()}). The way it works is that it is since the erdos_renyi function returns an adjacency list of 
INT nodes, so this relabels the nodes as STRINGS, changing 0 to '0', 1 to '1', etc. This way, the program is able to find the nodes as they need to be read as strings to work properly!
